// Copyright (c) 2010 NaturalMotion.  All Rights Reserved.
// Not to be copied, adapted, modified, used, distributed, sold,
// licensed or commercially exploited in any manner without the
// written consent of NaturalMotion.
//
// All non public elements of this software are the confidential
// information of NaturalMotion and may not be disclosed to any
// person nor used for any purpose not expressly approved by
// NaturalMotion in writing.

//----------------------------------------------------------------------------------------------------------------------
#ifdef _MSC_VER
  #pragma once
#endif
#ifndef MR_DEFINES_H
#define MR_DEFINES_H
//----------------------------------------------------------------------------------------------------------------------
#include "../../../sharedDefines/mSharedDefines.h"
#include "NMPlatform/NMPlatform.h"
#include "NMPlatform/NMMemory.h"
//----------------------------------------------------------------------------------------------------------------------

//----------------------------------------------------------------------------------------------------------------------
/// \file mrDefines.h
/// \brief Defines and constants used throughout Morpheme Runtime.
/// \ingroup CoreModule
//----------------------------------------------------------------------------------------------------------------------

namespace MR
{

// MORPH-21340: Remove use of fixed length arrays.
#define MAX_NUM_MESSAGE_TYPES           (256)
#define MAX_NUM_NODE_TYPES              (256)
#define MAX_NUM_QUEUING_FNS             (1024)
#define MAX_NUM_IMMEDIATE_FNS           (1024)
#define MAX_NUM_NODE_INIT_DATA_TYPES    (16)
#define MAX_NUM_ATTR_DATA_TYPES         (144)
#define MAX_NUM_TRANSIT_COND_TYPES      (256)
#define MAX_NUM_TRANSIT_DEADBLEND_TYPES (16)

/// Sets the maximum number of manager registerable prediction models.
///  Note that registered types must also lie within this value range.
///  This allows for fast array lookup by type.
static const uint32_t MAX_NUM_PREDICTION_MODEL_TYPES = 256;

/// Sets the maximum number of time synchronisation events that can be used in an EventTrackSync.
// MORPH-21340: Artificial limit due to fixed array size, needs removing.
#define MAX_NUM_SYNC_EVENTS         (16)

/// Sets the maximum number of EventTrackDuration's that a EventTrackDurationSet can contain.
// MORPH-21340: Artificial limit due to fixed array size, needs removing.
#define MAX_NUM_DURATION_EVENT_TRACKS_PER_SET (16)

//----------------------------------------------------------------------------------------------------------------------
/// Allows us to set params to NULL dependent on whether compiling for SPU or not.
#ifdef NM_HOST_CELL_SPU
  #define NMP_NULL_ON_SPU(_wat) NULL
  #define NMP_NULL_NOT_ON_SPU(_wat) _wat
#else
  #define NMP_NULL_ON_SPU(_wat) _wat
  #define NMP_NULL_NOT_ON_SPU(_wat) NULL
#endif //NM_HOST_CELL_SPU

/// Function arg followed by the same arg as a string literal. Commonly used in param lists of registration functions.
#define REG_FUNC_ARGS(x) x, NMP_NULL_ON_SPU(#x)

/// Function arg followed by the same arg as a string literal (NULL on SPU).
/// Final argument indicates if we are:
///  1. Determining the registration requirements for the Manager prior to actual registration of semantics.
///  2. Actually registering into registration arrays that have now been allocated.
/// Used to specify param lists of registration functions.
#define REG_FUNC_ARGS_COMPUTE(x) x, NMP_NULL_ON_SPU(#x), computeRegistryRequirements

/// Turn param to a string literal.
#define FN_NAME(x) #x, MR::x

//----------------------------------------------------------------------------------------------------------------------
///
typedef ptrdiff_t ObjectID;

///
static const ObjectID INVALID_OBJECT_ID = 0xFFFFFFFF;

//----------------------------------------------------------------------------------------------------------------------
/// \typedef MR::RuntimeAssetID
/// \brief The unique IDs used at Runtime to identify binary assets.
/// \ingroup AssetProcessorModule
///
/// Assets include: NetworkDefs, AnimationLibrarys, EventTrackDefs, RigToAnimMaps etc.
/// Assets are registered with the Manager on load so that assets can be located using this ID.
/// The scheme used for generating these IDs is determined by the registrable function GenUIDFunc.
typedef uint32_t RuntimeAssetID;

//----------------------------------------------------------------------------------------------------------------------
/// \typedef MR::RuntimeAnimLocator
/// \brief The ID used at Runtime for MR to locate animation data by calling back to the application,
/// via LoadAnimFn which is registered with MR::Manager.
/// \ingroup AssetProcessorModule
///
/// These IDs are generated by the registered ProcessAnimFunc. This scheme is independent of the RuntimeAssetID scheme.
/// Clients are very likely to wish to closely control the identification, bundling and management of animation assets,
/// more than the detailed management of the much smaller individual morpheme network specific assets.
/// These two schemes allow for this.
///
/// With the default NaturalMotion implementation of ProcessAnimFunc (macProcessAnimFunc) this ID is associated with a
/// single entry within the animation cache (animCache.xml).
/// It identifies a specific combination of an Animation and one or more Rigs.
/// A source Animation can appear in the cache more than once if it is compiled against more than one set of Rigs.
typedef uint32_t RuntimeAnimAssetID;

/// Sets the max number of objects in the registry.
// MORPH-21340: Artificial limit due to fixed array size, needs removing.
#define MAX_NUM_REGISTERED_OBJECTS  (8192)

/// For registering animation compression formats
#define MAX_NUM_ANIMATION_FORMAT_TYPES  (16)

/// Value used to indicate a bad runtime animation asset ID.
static const RuntimeAnimAssetID INVALID_ANIM_ASSET_ID = 0xFFFFFFFF;

/// Value used to indicate a bad runtime asset ID.
static const RuntimeAssetID INVALID_ASSET_ID = 0xFFFFFFFF;

/// Used in by Manager when attempting to locate registered functions e.g. Queuing Functions.
static const uint32_t INVALID_FUNCTION_ID = 0xFFFFFFFF;

//----------------------------------------------------------------------------------------------------------------------
/// \brief Defines used in the smooth transform node.
/// \ingroup CoreModule
//
#define MR_SMOOTH_TRANSFORMS_NODE_FILTERS_DEFAULT_CUT_OFF_FREQUENCY 20.0f
#define MR_SMOOTH_TRANSFORMS_NODE_FILTERS_MIN_CUT_OFF_FREQUENCY 3.0f
#define MR_SMOOTH_TRANSFORMS_NODE_FILTERS_MAX_CUT_OFF_FREQUENCY 1200.0f
#define MR_SMOOTH_TRANSFORMS_NODE_RESCALE_CONTROLS_COEFF 21.196f // So that a control value of 0.5 outputs 20 for the cut off frequency.

//----------------------------------------------------------------------------------------------------------------------
/// An error tolerance for general use to ensure correctness of floating calculations or comparisons.
static const float ERROR_LIMIT = 0.0001f;

//----------------------------------------------------------------------------------------------------------------------
/// \typedef MR::TimeFraction
/// \brief Indicates a a fraction of time. Values greater than 1.0f imply a loop
/// \ingroup CoreModule
typedef float TimeFraction;

//----------------------------------------------------------------------------------------------------------------------
/// Flags indicating how and when we should consider 2 events for blending or rejection when merging 2 event tracks.
/// More than one of these flags can be set, but some override the operation of others.

/// Do not attempt to match events together for blending or rejection just copy all events straight to output.
#define DURATION_EVENT_MATCH_PASS_THROUGH                      GEN_NAMESPACED_ID_32(NM_ID_NAMESPACE, 0)

/// Blend or Reject blindly in sequence. If there are remaining events in one track then simply copy them into the result.
#define DURATION_EVENT_MATCH_IN_SEQUENCE                       GEN_NAMESPACED_ID_32(NM_ID_NAMESPACE, 1)

/// Only consider events with the same ID for Blending or Rejection.
#define DURATION_EVENT_MATCH_SAME_IDS                          GEN_NAMESPACED_ID_32(NM_ID_NAMESPACE, 2)

/// Blend or Reject only when events are overlapping. If not overlapping simply copy into the result.
#define DURATION_EVENT_MATCH_ON_OVERLAP                        GEN_NAMESPACED_ID_32(NM_ID_NAMESPACE, 3)

/// Blend or Reject only when events are within a specified event range of each other, otherwise put straight into the result.
#define DURATION_EVENT_MATCH_WITHIN_RANGE                      GEN_NAMESPACED_ID_32(NM_ID_NAMESPACE, 4)

/// In sequence and with the same IDs and if overlapping.
#define DURATION_EVENT_MATCH_IN_SEQUENCE_SAME_IDS_ON_OVERLAP   GEN_NAMESPACED_ID_32(NM_ID_NAMESPACE, 5)

/// In sequence and with the same IDs and within a specified range.
#define DURATION_EVENT_MATCH_IN_SEQUENCE_SAME_IDS_WITHIN_RANGE GEN_NAMESPACED_ID_32(NM_ID_NAMESPACE, 6)

/// In sequence and with the same IDs.
#define DURATION_EVENT_MATCH_IN_SEQUENCE_SAME_IDS              GEN_NAMESPACED_ID_32(NM_ID_NAMESPACE, 7)

/// In sequence and if overlapping.
#define DURATION_EVENT_MATCH_IN_SEQUENCE_ON_OVERLAP            GEN_NAMESPACED_ID_32(NM_ID_NAMESPACE, 8)

/// In sequence and within a specified range.
#define DURATION_EVENT_MATCH_IN_SEQUENCE_WITHIN_RANGE          GEN_NAMESPACED_ID_32(NM_ID_NAMESPACE, 9)

/// With the same IDs and if overlapping.
#define DURATION_EVENT_MATCH_SAME_IDS_ON_OVERLAP               GEN_NAMESPACED_ID_32(NM_ID_NAMESPACE, 10)

/// With the same IDs and within a specified range.
#define DURATION_EVENT_MATCH_SAME_IDS_WITHIN_RANGE             GEN_NAMESPACED_ID_32(NM_ID_NAMESPACE, 11)

//----------------------------------------------------------------------------------------------------------------------
/// NaturalMotion event blending operation type identifiers.
/// When 2 events from 2 event streams have been matched the event blending operation determines how to blend them together.

/// Reject one event over the other completely, dependent on weight and priority of the event ID within its group.
#define DURATION_EVENT_BLEND_OP_TYPE_SELECT  GEN_NAMESPACED_ID_32(NM_ID_NAMESPACE, 0)

/// Blend the event positions together, but continue to reject an events ID based on weight and priority of event ID within its group.
#define DURATION_EVENT_BLEND_OP_TYPE_BLEND   GEN_NAMESPACED_ID_32(NM_ID_NAMESPACE, 1)

//----------------------------------------------------------------------------------------------------------------------
/// \enum EventType
/// \brief NaturalMotion EventTrack Type identifiers.
/// \ingroup
enum EventType
{
  kEventType_Discrete = 0,
  kEventType_Curve,
  kEventType_Duration,
  kEventTypeNumTypes, ///< number of event types, ensure this is last enum defined
};

} // namespace MR

//----------------------------------------------------------------------------------------------------------------------
#endif // MR_DEFINES_H
//----------------------------------------------------------------------------------------------------------------------

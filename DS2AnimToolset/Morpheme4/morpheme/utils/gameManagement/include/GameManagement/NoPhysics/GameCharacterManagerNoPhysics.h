// Copyright (c) 2012 NaturalMotion.  All Rights Reserved.
// Not to be copied, adapted, modified, used, distributed, sold,
// licensed or commercially exploited in any manner without the
// written consent of NaturalMotion.
//
// All non public elements of this software are the confidential
// information of NaturalMotion and may not be disclosed to any
// person nor used for any purpose not expressly approved by
// NaturalMotion in writing.

//----------------------------------------------------------------------------------------------------------------------
#ifdef _MSC_VER
  #pragma once
#endif
#ifndef GAME_CHARACTER_MANAGER_NO_PHYSICS_H
#define GAME_CHARACTER_MANAGER_NO_PHYSICS_H
//----------------------------------------------------------------------------------------------------------------------
#include "GameManagement/GameCharacterManager.h"
#include "GameManagement/NoPhysics/GameCharacterNoPhysics.h"
//----------------------------------------------------------------------------------------------------------------------

namespace Game
{

//----------------------------------------------------------------------------------------------------------------------
/// \class Game::CharacterManagerNoPhysics
/// \brief Provides a simplified interface to managing and updating a set of NoPhysics morpheme characters.
///
/// It is an example of how you could manage the morpheme animation system within your application.
/// It manages lists of characters and character definitions wrapping many morpheme API calls into conceptually simplified methods.
/// It includes the registration of character definitions and characters as well as management of their subsequent use.
//----------------------------------------------------------------------------------------------------------------------
class CharacterManagerNoPhysics : public CharacterManager
{
public:
  
  CharacterManagerNoPhysics();
  virtual ~CharacterManagerNoPhysics();
  
  /// \brief Allocate required memory and initialise
  virtual void init() NM_OVERRIDE;

  /// \brief Free allocated memory and shutdown
  virtual void term() NM_OVERRIDE;

  /// \brief Create and initialise a CharacterDef; loading its assets a specified simple bundle source file.
  ///
  /// CharacterDefs that are created via the Manager are automatically registered with the manager
  ///  and the memory management of the Character remains the responsibility of the Manager.
  CharacterDef* createCharacterDef(
    const char* filename); ///< Name of simple bundle file where we should try and load this characters assets from.
    
  /// \brief Create CharacterDef and initialise it from the simple bundle assets that have been loaded in to the specified memory block.
  ///
  /// CharacterDefs that are created via the Manager are automatically registered with the manager
  ///  and the memory management of the Character remains the responsibility of the Manager.
  CharacterDef* createCharacterDef(
    void*  bundle,      ///< Block of memory that holds this characters simple bundle assets.
    size_t bundleSize); ///< Memory block size.
    
  /// Characters that are created via the Manager are automatically registered with the manager
  ///  and the memory management of the Character remains the responsibility of the Manager.
  CharacterNoPhysics* createCharacter(
    CharacterDef*           characterDef,       // Must have been registered with this manager.
    const NMP::Vector3&     initialPosition = NMP::Vector3::InitZero,
    const NMP::Quat&        initialOrientation = NMP::Quat::kIdentity,
    MR::AnimSetIndex        initialAnimSetIndex = 0,
    const char*             name = "",
    NMP::FastHeapAllocator* temporaryMemoryAllocator = NULL,
    uint32_t                externalIdentifier = 0xFFFFFFFF);
  

  //----------------------------
  // Update functions.
  //----------------------------
  // Update step 1: For animation and physics update loops.
  //  Calls updateToPreCharacterController on all active character instances.
  //  Builds queues and processes them up to the point where the global character controller update is required.
  //  After this step the game or AI can amend the position of the character if so desired.
  void updateToPreCharacterController(float timeDelta);

  // Update step 2: For animation only update loops.
  //  Calls the final update step on all active character instances.
  //  Updates the animation character controllers.
  //  Does any remaining network execution, does final amendments to the character controller position
  //   and computes world transforms.
  //  Call this function only if you want to directly use the delta trajectory generated by the network
  //   in updateToPreCharacterController in order to drive the character position.
  //  If you want to override the Networks suggested delta trajectory replace this function with your own implementation.
  void updateFinalise();
};

} // namespace Game

//----------------------------------------------------------------------------------------------------------------------
#endif // GAME_CHARACTER_MANAGER_NO_PHYSICS_H
//----------------------------------------------------------------------------------------------------------------------

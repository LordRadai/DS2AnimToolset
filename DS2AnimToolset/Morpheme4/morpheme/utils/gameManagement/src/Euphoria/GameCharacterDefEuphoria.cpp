// Copyright (c) 2012 NaturalMotion.  All Rights Reserved.
// Not to be copied, adapted, modified, used, distributed, sold,
// licensed or commercially exploited in any manner without the
// written consent of NaturalMotion.
//
// All non public elements of this software are the confidential
// information of NaturalMotion and may not be disclosed to any
// person nor used for any purpose not expressly approved by
// NaturalMotion in writing.

//----------------------------------------------------------------------------------------------------------------------
#include "GameManagement/Euphoria/GameCharacterDefEuphoria.h"

// HARDWIRED FOR NOW, UNTIL WE SUPPORT MULTIPLE LIBS / NS
#include "AutoGenerated/NetworkForceInclude.h"
#include "AutoGenerated/NetworkDescriptor.h"
//----------------------------------------------------------------------------------------------------------------------

namespace Game
{

//----------------------------------------------------------------------------------------------------------------------
CharacterDefEuphoria* CharacterDefEuphoria::create(const char* filename, ValidatePluginListFn validatePluginList)
{
  //----------------------------
  // Load the given bundle file into memory and load the bundle.
  NMP_DEBUG_MSG("Loading: %s", filename);

  void* bundle = NULL;
  int64_t bundleSize = 0;

  //----------------------------
  // Load binary bundle into memory
  int64_t fileSize = NMP::NMFile::allocAndLoad(filename, &bundle, &bundleSize);
  if (fileSize == -1)
  {
    NMP_ASSERT_FAIL();
    NMP_DEBUG_MSG("Failed to load file '%s'", filename);
    NMP_DEBUG_MSG("Perhaps the assets have not been processed.");
  }

  CharacterDefEuphoria* instance = CharacterDefEuphoria::create(bundle, (size_t)bundleSize, validatePluginList);

  //----------------------------
  // We have loaded the information in the buffer now so we can free it.
  NMP::Memory::memFree(bundle);

  return instance;
}

//----------------------------------------------------------------------------------------------------------------------
CharacterDefEuphoria* CharacterDefEuphoria::create(void* bundle, size_t bundleSize, ValidatePluginListFn validatePluginList)
{
  if (!bundle || !bundleSize)
  {
    NMP_DEBUG_MSG("error: Valid bundle expected!");
    return NULL;
  }

  //----------------------------
  // Create and initialise an instance of our character definition
  CharacterDefEuphoria* const instance = static_cast<CharacterDefEuphoria*>(NMPMemoryAlloc(sizeof(CharacterDefEuphoria)));
  new(instance) CharacterDefEuphoria();

  //----------------------------
  // Allocate memory and unpack bundle
  if(!(instance->init(bundle, bundleSize, validatePluginList)))
  {
    NMP::Memory::memFree(instance);

    NMP_ASSERT_FAIL();
    NMP_DEBUG_MSG("Failed to initialise character definition");
  }

  NMP_DEBUG_MSG("Game::CharacterDefEuphoria created");

  return instance;
}

//----------------------------------------------------------------------------------------------------------------------
bool CharacterDefEuphoria::init(
  void*                buffer,
  size_t               bufferSize,
  ValidatePluginListFn validatePluginList)
{
  NMP_ASSERT(buffer && bufferSize);

  //----------------------------
  // Evaluate the asset requirements of the network definition from the bundle
  AssetLoader::evalBundleRequirements(
                            m_numRegisteredAssets,
                            m_numClientAssets,
                            buffer,
                            bufferSize);
  NMP_ASSERT(m_numRegisteredAssets > 0);

  //----------------------------
  // Allocate arrays for storing asset information based on the bundle requirements
  m_registeredAssetIDs = (uint32_t*)NMPMemoryCalloc(m_numRegisteredAssets * sizeof(uint32_t));
  m_clientAssets = (void**)NMPMemoryCalloc(m_numClientAssets * sizeof(void*));

  //----------------------------
  // Process the bundle and extract the contents into memory.
  // Load the assets.
  m_netDef = AssetLoader::loadBundle(
                            buffer,
                            bufferSize,
                            m_registeredAssetIDs,
                            m_netDefGuid,
                            m_clientAssets,
                            m_numRegisteredAssets,
                            m_numClientAssets,
                            validatePluginList,
                            m_netDefSpecificAnimIDtoFilenameLookup,
                            m_netPredictionDef);
  if (!m_netDef)
  {
    NMP_ASSERT(m_netDef);
    return false;
  }
  
  // Create a euphoria character def; only if the network def contains behaviours.
  if (m_netDef->containsNodeWithFlagsSet(MR::NodeDef::NODE_FLAG_IS_BEHAVIOURAL))
  {
    // Euphoria character def.
    m_euphoriaNetworkInterface = static_cast<ER::NetworkInterface*>(NMPMemoryAlloc(sizeof(NM_BEHAVIOUR_LIB_NAMESPACE::NMBehaviourLibrary)));
    new(m_euphoriaNetworkInterface) NM_BEHAVIOUR_LIB_NAMESPACE::NMBehaviourLibrary();
    m_euphoriaNetworkInterface->init();
    m_euphoriaCharacterDef.create(m_netDef, m_euphoriaNetworkInterface->getBehaviourDefs());
  }
  else
  {
    m_euphoriaNetworkInterface = NULL;
    m_euphoriaCharacterDef.create(NULL, NULL);
  }


  m_isLoaded   = true;

  return true;
}

//----------------------------------------------------------------------------------------------------------------------
void CharacterDefEuphoria::term()
{
  // release 
  if (m_euphoriaNetworkInterface)
  {
    m_euphoriaCharacterDef.destroy();
    m_euphoriaNetworkInterface->term();
    NMP::Memory::memFree(m_euphoriaNetworkInterface);
    m_euphoriaNetworkInterface = NULL;
  }

  if (m_isLoaded)
  { 
    //----------------------------
    // unload the CharacterDef's animations
    unloadAnimations();

    //----------------------------
    // unload the CharacterDef's bundle
    AssetLoader::unloadAssets(m_registeredAssetIDs, m_numRegisteredAssets, m_clientAssets, m_numClientAssets);

    m_isLoaded = false;
  }

  //----------------------------
  // Free any other memory that may be allocated in this class here
  if (m_registeredAssetIDs)
  {
    NMP::Memory::memFree(m_registeredAssetIDs);
    m_registeredAssetIDs = NULL;
  }

  if(m_clientAssets)
  {
    NMP::Memory::memFree(m_clientAssets);
    m_clientAssets = NULL;
  }
}

} // namespace Game

//----------------------------------------------------------------------------------------------------------------------

// Copyright (c) 2009 NaturalMotion.  All Rights Reserved.
// Not to be copied, adapted, modified, used, distributed, sold,
// licensed or commercially exploited in any manner without the
// written consent of NaturalMotion.  
//
// All non public elements of this software are the confidential
// information of NaturalMotion and may not be disclosed to any
// person nor used for any purpose not expressly approved by
// NaturalMotion in writing.

#if 0

// Non-SPU so it can interface with the system to get data into an appropriate network format etc
__global_access__ __generate_interface__ module_def ShieldBehaviourInterface
{
owner: MyNetwork<>

data:
  // Following are only used if the behaviour param UseSingleFrameForShieldPoses is set to true
  PoseData shieldPose[networkMaxNumLimbs];
  Weight shieldPoseImportance[networkMaxNumLimbs];
  
feedIn:
  Angle yawAngle; ///< current yaw rotation required to turn away from the hazard
  Angle hazardAngle; ///< Relative to the support forwards direction
  Weight doShieldWithUpperBody;
  Weight doShieldWithLowerBody; ///< Will be sent only if character is not supported.
  Multiplier driveCompensationScale; ///< Multiplier used to multiply the normalDriveCompensation of each limb.
  bool suppress;
  
out:
  PoseData armPose[networkMaxNumArms];
  PoseData headPose[networkMaxNumHeads];
  PoseData spinePose[networkMaxNumSpines];
  PoseData legPose[networkMaxNumLegs];

  ShieldParameters shieldParameters;

  TimePeriod smoothReturnTP; ///< Minimum time period character will do a shield.
  Multiplier turnAwayScale; ///< Scale used to set the amount of rotation to turn away from the hazard (0 - 1).
  BalancePoseParameters poseParameters;
  
feedOut:
  bool isShielding;
  
connections<>:
  feedIn.yawAngle = (owner.hazardManagement.shieldManagement.feedOut.shieldSpineYawAngle);
  feedIn.hazardAngle = (owner.hazardManagement.shieldManagement.feedOut.hazardAngle);
  feedIn.driveCompensationScale = (owner.hazardManagement.shieldManagement.feedOut.driveCompensationScale);
  feedIn.doShieldWithUpperBody = (owner.hazardManagement.shieldManagement.feedOut.doShieldWithUpperBody);
  feedIn.doShieldWithLowerBody = (owner.hazardManagement.shieldManagement.feedOut.doShieldWithLowerBody);
  feedIn.suppress = junctions.feedIn_suppress = isBoolSet(
    owner.arms[*].grab.feedOut.isHighPriority, 
    owner.hazardManagement.freeFallManagement.out.isInFreefall,
    owner.shieldActionBehaviourInterface.out.isRunning,
    owner.hazardManagement.grab.out.edgeOvershot
    );
}

#endif

#pragma once

/*
* Copyright (c) 2013 NaturalMotion Ltd. All rights reserved.
*
* Not to be copied, adapted, modified, used, distributed, sold,
* licensed or commercially exploited in any manner without the
* written consent of NaturalMotion.
*
* All non public elements of this software are the confidential
* information of NaturalMotion and may not be disclosed to any
* person nor used for any purpose not expressly approved by
* NaturalMotion in writing.
*
*/

#ifndef NM_IMPULSE_HELPERS_H
#define NM_IMPULSE_HELPERS_H

//----------------------------------------------------------------------------------------------------------------------
#include "AutoGenerated/NetworkForceInclude.h"
#include "AutoGenerated/Types/ActorImpulse.h"
#include "euphoria/erLimb.h"
//----------------------------------------------------------------------------------------------------------------------

#ifndef NM_BEHAVIOUR_LIB_NAMESPACE
  #error behaviour library namespace undefined
#endif

namespace NM_BEHAVIOUR_LIB_NAMESPACE
{
//----------------------------------------------------------------------------------------------------------------------
NM_INLINE void applyImpulseToBodyPart(
  MR::PhysicsRig::Part* part,
  const NMP::Vector3&   impulse,
  const NMP::Vector3&   torqueImpulse)
{
  NMP_ASSERT(part);
  part->addImpulse(impulse);
  part->addTorqueImpulse(torqueImpulse);
}

//----------------------------------------------------------------------------------------------------------------------
NM_INLINE void applyForceToBodyPart(MR::PhysicsRig::Part* part, const NMP::Vector3& force, const NMP::Vector3& torque)
{
  NMP_ASSERT(part);
  part->addForce(force);
  part->addTorque(torque);
}

//----------------------------------------------------------------------------------------------------------------------
// Splits an impulse into component linear and angular parts, so it can apply enhancements as
// required e.g. torque multiplying
//----------------------------------------------------------------------------------------------------------------------
void applyEnhancedImpulseToPart(MR::PhysicsRig::Part* part, const ActorImpulse& actorImpulse);

//----------------------------------------------------------------------------------------------------------------------
// Apply a linear impulse to all parts of a limb.
// The magnitude of the impulse is proportional to the mass of each part.
// It will be applied in world space direction at a part's COM.
//----------------------------------------------------------------------------------------------------------------------
void applyImpulseToAllPartsOfLimb(ER::Limb* limb, const NMP::Vector3& linearImpulse);

//----------------------------------------------------------------------------------------------------------------------
void applyVelocityChangeToAllPartsOfLimb(ER::Limb* limb, const NMP::Vector3& velocityChange);

//----------------------------------------------------------------------------------------------------------------------
// Apply a linear impulse to all the parts of the character.
// The magnitude of the impulse is proportional to the mass of each part.
// It will be applied in world space direction at a part's COM.
//----------------------------------------------------------------------------------------------------------------------
void applyImpulseToAllPartsOfCharacter(MR::PhysicsRig* pRig, const NMP::Vector3& linearImpulse);

//----------------------------------------------------------------------------------------------------------------------
void applyVelocityChangeToAllPartsOfCharacter(MR::PhysicsRig* pRig, const NMP::Vector3& velocityChange);

}
#endif

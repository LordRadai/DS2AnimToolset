// Copyright (c) 2012 NaturalMotion.  All Rights Reserved.
// Not to be copied, adapted, modified, used, distributed, sold,
// licensed or commercially exploited in any manner without the
// written consent of NaturalMotion.
//
// All non public elements of this software are the confidential
// information of NaturalMotion and may not be disclosed to any
// person nor used for any purpose not expressly approved by
// NaturalMotion in writing.

//----------------------------------------------------------------------------------------------------------------------
#ifdef _MSC_VER
  #pragma once
#endif
#ifndef GAME_CHARACTER_NO_PHYSICS_H
#define GAME_CHARACTER_NO_PHYSICS_H
//----------------------------------------------------------------------------------------------------------------------
#include "morpheme/mrDispatcher.h"

#include "GameManagement/GameCharacter.h"
#include "GameManagement/GameCharacterDef.h"
#include "GameManagement/NoPhysics/GameCharacterControllerNoPhysics.h"

#include <string>
//----------------------------------------------------------------------------------------------------------------------

namespace Game
{

//----------------------------------------------------------------------------------------------------------------------
/// class Game::CharacterNoPhysics
/// Character represents an instance of a GameCharacterDef. Essentially the class wraps up the instantiated morpheme
/// network and the information required to update and run an individual character. In a game scenario a Character
/// Class could also store data for a character instance (current health/ammo etc).
//----------------------------------------------------------------------------------------------------------------------
class CharacterNoPhysics : public Character
{
public:

  virtual ~CharacterNoPhysics() {};

  /// \brief Allocate and initialise a CharacterNoPhysics instance.
  ///
  /// This does an initialising update step of the characters Network
  ///  in order to get it in to proper starting state.
  static CharacterNoPhysics* create(
    CharacterDef*             characterDef,
    const NMP::Vector3&       initialPosition = NMP::Vector3::InitZero,
    const NMP::Quat&          initialOrientation = NMP::Quat::kIdentity,
    MR::AnimSetIndex          initialAnimSetIndex = 0,
    const char*               name = "",
    NMP::TempMemoryAllocator* temporaryMemoryAllocator = NULL,
    uint32_t                  externalIdentifier = 0xFFFFFFFF);

  /// \brief deinitialise and deallocate a CharacterNoPhysics instance.
  virtual void destroy() NM_OVERRIDE;
  
  //----------------------------
  // Update stages.
  //----------------------------

  // Update step 1:  
  //  Build the queue and process it up to the point where the global character controller update is required.
  //  After this step the game or AI can amend the position of the character if so desired.
  void updateToPreCharacterController(float deltaTime);

  // Update step 2:
  //  The final update stage.
  void updateFinalise(
    const NMP::Vector3* deltaTranslation = NULL, ///< Allows the caller to apply a delta translation other than the one generated by the Network update.
                                                 ///<  If not supplied then the delta value generated by the Network will be used.
    const NMP::Quat*    deltaOrientation = NULL  ///< Allows the caller to apply a delta orientation other than the one generated by the Network update.
                                                 ///<  If not supplied then the delta value generated by the Network will be used.
    );

  // Returns the character controller held in the network.
  CharacterControllerNoPhysics*  getCharacterController() { return static_cast<CharacterControllerNoPhysics*>(m_net->getCharacterController()); }
   
protected:
  
  CharacterNoPhysics() {};
};

} // namespace Game

//----------------------------------------------------------------------------------------------------------------------
#endif // GAME_CHARACTER_NO_PHYSICS_H
//----------------------------------------------------------------------------------------------------------------------


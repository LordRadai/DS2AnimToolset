// Copyright (c) 2012 NaturalMotion.  All Rights Reserved.
// Not to be copied, adapted, modified, used, distributed, sold,
// licensed or commercially exploited in any manner without the
// written consent of NaturalMotion.
//
// All non public elements of this software are the confidential
// information of NaturalMotion and may not be disclosed to any
// person nor used for any purpose not expressly approved by
// NaturalMotion in writing.

//----------------------------------------------------------------------------------------------------------------------
#ifdef _MSC_VER
  #pragma once
#endif
#ifndef GAME_ANIM_LOADER_H
#define GAME_ANIM_LOADER_H
//----------------------------------------------------------------------------------------------------------------------
#include "comms/connection.h"
#include "morpheme/AnimSource/mrAnimSource.h"
#include "simpleBundle/simpleAnimRuntimeIDtoFilenameLookup.h"
#include "simpleBundle/simpleAnimRegistry.h"
//----------------------------------------------------------------------------------------------------------------------

namespace Game
{

//----------------------------------------------------------------------------------------------------------------------
/// \class Game::AnimLoader
/// \brief This is an example implementation of an animation loader that handles animation (un)loading from disk.
///
/// AnimSystemModule registers this animation loader with MR::Manager for use with the tutorials. As this class has little
/// outside dependency it should serve well as a starting point for your own implementations.
///
/// The functions in this class are designed to work with the bundles generated by the default morpheme asset compilers.
/// These bundles contain an asset of type kAsset_SimpleAnimRuntimeIDtoFilenameLookup which is used to translate the
/// animation asset IDs provided by the morpheme runtime into filenames. The filenames are in turn used to load and
/// unpack the respective files into memory and return the located memory to the morpheme runtime.
///
/// Further, the assumption is made that all animation files are located in a folder ANIM_ROOT_FOLDER (or loaded over a
/// COMMS connection if set in the user data). The memory is allocated/freed using the functions provided by
/// NMP::Memory and animations are not shared between network definitions (see MR::UTILS::SimpleAnimRegistry for how to
/// share animations between definitions).
//----------------------------------------------------------------------------------------------------------------------
class AnimLoader
{
public:

  //-----------------------------------------------------
  /// \class AnimLoader::UserData
  /// \brief A data structure supplied to a Networks loadAnimations and unloadAnimations which supplies all information
  ///  required to deal with the load or unload request.
  ///
  /// This is an example structure that supplies handles to our SimpleAnimRegistry and other useful data.
  /// A game would likely replace this structure with its own.
  /// Networks can can load or unload their animations independently of their other assets which by default get
  /// packaged in to one SimpleBundle. This is because animations are generally a lot larger and can require more flexible
  /// management.
  //-----------------------------------------------------
  class UserData
  {
  public:

    /// All loaded animations are registered with this SimpleAnimRegistry instance.
    /// It reference counts each animation thereby allowing shared use of the same animation between Networks.
    MR::UTILS::SimpleAnimRegistry*                  m_animRegistry;

    /// Generated against a specific NetworkDef in the AssetCompiler.
    /// Stores a map between animation IDs (local to a NetworkDef) and other information such as
    /// animation file name, format, CRC etc.
    MR::UTILS::SimpleAnimRuntimeIDtoFilenameLookup* m_animFileLookup;

    const char*                                     m_animLocation;
    MCOMMS::Connection*                             m_connection;

    UserData() : m_animFileLookup(NULL), m_animLocation(NULL), m_connection(NULL) {}
  };

  /// \brief This function is registered with morpheme to handle animation loading.
  /// \see MR::Manager::setAnimFileHandlingFunctions()
  /// \see MR::Manager::RequestAnimFn
  ///
  /// Depending on the user data provided, animations are either loaded from disk or over the provided COMMS connection.
  /// The general use case is to load animations from disk while loading over a connection is required only if the
  /// network preview capability is supported (see the LiveLinkNetworkPreview tutorial).
  static MR::AnimSourceBase* requestAnim(
    const MR::RuntimeAnimAssetID animAssetID,
    void*                        userdata_);

  /// \brief This function is registered with morpheme to handle animation unloading.
  /// \see MR::Manager::setAnimFileHandlingFunctions()
  /// \see MR::Manager::ReleaseAnimFn
  static void releaseAnim(
    const MR::RuntimeAnimAssetID animAssetID,
    MR::AnimSourceBase*          loadedAnimation,
    void*                        userdata_);

  /// All loaded animations are registered with this SimpleAnimRegistry instance.
  /// It reference counts each animation thereby allowing shared use of the same animation between Networks.
  /// This prevents duplicate loading of the same animation and premature unloading of animations.
  /// A game is likely to have it own method of managing animation resources so it is expected that use of this class
  /// would be replaced.
  static MR::UTILS::SimpleAnimRegistry sm_animRegistry;

private:

  /// AnimLoader is a static class.
  AnimLoader() {}
  ~AnimLoader();
};

} // namespace Game

//----------------------------------------------------------------------------------------------------------------------
#endif // GAME_ANIM_LOADER_H
//----------------------------------------------------------------------------------------------------------------------
